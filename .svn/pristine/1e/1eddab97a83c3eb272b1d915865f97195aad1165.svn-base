using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using BusinessLogic;
using BusinessLogic.Common;
using BusinessLogic.Search;
using BusinessLogic.SortingTask;
using HDWLogic;
using HDWLogic.Issued;

namespace MonitorMain.CustomContorl
{
    public partial class C_SortingMain : UserControl
    {
        private Dictionary<string, C_Shelf> cShelves;
        private Dictionary<string, CCube> cCubes;
        private Dictionary<string, FlowLayoutPanel> flowLayoutPanels; 
        private SortingSubLineList sortingSubLineList;

        public C_SortingMain()
        {
            SetStyle(ControlStyles.UserPaint, true);
            SetStyle(ControlStyles.AllPaintingInWmPaint, true); // 禁止擦除背景.
            SetStyle(ControlStyles.DoubleBuffer, true); //双缓冲
            this.UpdateStyles();
            InitializeComponent();
            Dock = DockStyle.Fill;
            
        }

        


        private C_Shelf CreateShelf(SortingLineBox sortingLineBox)
        {
            C_Shelf c_Shelf = new C_Shelf(sortingLineBox);
            c_Shelf.SetTooltip();
            c_Shelf.Name = sortingLineBox.LineBoxCode;
            return c_Shelf;
        }

        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams cp = base.CreateParams;
                cp.ExStyle |= 0x02000000;
                return cp;
            }
        }

        private void C_SortingMain_Load(object sender, EventArgs e)
        {
            CSortingTask.OnUpdateCSortingMainCubeEvent += new EventHandler<EventArgs>(cSortingTask_OnUpdateCSortingMainCubeEvent);
            CSortingTask.OnUpdateCSortingMainNumEvent += new EventHandler<UpdateCSortingMainNumEventArgs>(cSortingTask_OnUpdateCSortingMainNumEvent);
            if (IsVerifyPass())
            {
                MonitorLog monitorLog;
                monitorLog = MonitorLog.NewMonitorLog();
                monitorLog.LOGNAME = "数据库读取";
                monitorLog.LOGINFO = "订单数据读取成功!";
                monitorLog.LOGLOCATION = "数据库";
                monitorLog.LOGTYPE = 1;
                monitorLog.Save();
                
            }

            //获取任务列表
            SortingLineTaskQueue.GetInstance().LoadSortingLineTasks();
            LoadLinBox();
            LoadCube();
            
            TagSdk tagSdk = TagSdk.instance;
            
        }

        private bool IsVerifyPass()
        {
            SortingLineTask.IsCurrentOrder();

            SortingLineTask.IsIndexRepetition();

            return true;
        }

        private void LoadCube()
        {
            SortingLineTaskQueue.GetInstance().GetCubes();
            sortingSubLineList = SortingSubLineList.GetSubSortingLineList();
            this.tableLayoutPanel1.ColumnCount = sortingSubLineList.Count;
            foreach (SortingSubLine sortingSubLine in sortingSubLineList)
            {
                tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent,100F));
            }

            SortingLineTaskQueue.GetInstance().LoadSortingLineTasks();
            for (int j = 0; j < sortingSubLineList.Count; j++)
            {
                CCube cCube = new CCube();
                cCube.Dock = DockStyle.Fill;
                cCube.Name = "ccube" + j;
                cCube.Margin = new Padding(0, 0, 0, 0);
                cCube.labcustname.Text = "无任务";
                cCube.labfinnum.Text = "0";
                cCube.labindexno.Text = "0";
                cCube.panelno.Text = (j+1).ToString();
                cCube.Tag = sortingSubLineList[j].sublineCode;
                cCubes.Add(sortingSubLineList[j].sublineCode,cCube);
                try
                {
                    cCube.labcustname.Text = SortingLineTaskQueue.GetInstance().Cubes[(j+1).ToString()].Customername;
                    cCube.labfinnum.Text = SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].FinCignum.ToString();
                    cCube.labindexno.Text = SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].Indexno.ToString();
                    cCube.SetTooltip((j+1),SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].FinSortingLineTaskDetails);

                }
                catch (Exception)
                {


                }
                tableLayoutPanel1.Controls.Add(cCube, j, 0);
            }

        }

        public void LoadLinBox()
        {
            SortingLineBoxList sortingLineBoxList = SortingLineBoxList.GetLineBoxList();

            cCubes = new Dictionary<string, CCube>();
            cShelves = new Dictionary<string, C_Shelf>();
            
            flowLayoutPanel1.Controls.Clear();
            flowLayoutPanel2.Controls.Clear();
            if (sortingLineBoxList.Count > 0)
            {
                foreach (SortingLineBox sortingLineBox in sortingLineBoxList)
                {
                    if (Convert.ToInt32(sortingLineBox.LineBoxCode) <= 60)
                    {
                        C_Shelf cShelf = CreateShelf(sortingLineBox);
                        cShelves.Add(cShelf.Name, cShelf);
                        cShelf.Margin = new Padding(0, 0, 1, 0);
                        //cShelf.PickNum = "111";
                        flowLayoutPanel1.Controls.Add(cShelf);
                    }
                    else
                    {
                        C_Shelf cShelf = CreateShelf(sortingLineBox);
                        cShelves.Add(cShelf.Name, cShelf);
                        cShelf.Margin = new Padding(0, 0, 1, 0);
                        flowLayoutPanel2.Controls.Add(cShelf);
                    }
                    
                }
            }

            //发送卷烟数量到数码管
            SortingLineTask[] sortingLineTasks = new SortingLineTask[] { };
            sortingLineTasks = SortingLineTaskQueue.GetInstance().SortingLineTasks.ToArray();
            Array.Reverse(sortingLineTasks);
            TagSdk.instance.CigNums = SetOrderNixielight(sortingLineTasks);
            UpdateLineboxNum();
            if (chkshowqty.Checked)
            {
                chkshowqty_CheckedChanged(null, null);
            }
            else
            {
                chkshowqty.Checked = true;
            }
        }


        /// <summary>
        /// 发送订单到数码管
        /// </summary>
        private Dictionary<int, int> SetOrderNixielight(SortingLineTask[] sortingLineTasks)
        {
            Dictionary<int, int> senDictionary = new Dictionary<int, int>();

            try
            {

                for (int i = 1; i <= 89; i++)
                {
                    senDictionary.Add(i, 0);
                }

                for (int j = 0; j < sortingLineTasks.Length; j++)
                {
                    IEnumerable<SortingLineTaskDetail> sortingLineTaskDetails = sortingLineTasks[j].SortingLineTaskDetails.GetAreaDetails((j + 1).ToString());

                    foreach (SortingLineTaskDetail detail in sortingLineTaskDetails)
                    {
                        try
                        {
                            senDictionary[Convert.ToInt32(detail.LINEBOXCODE)] = detail.QTY;
                        }
                        catch (Exception)
                        {


                        }

                    }

                    //NixielightSDK.SendByMODBUS(senDictionary);
                }


            }
            catch (Exception)
            {


            }

            return senDictionary;
        }

        private void chkshowqty_CheckedChanged(object sender, EventArgs e)
        {
            if (chkshowqty.Checked)
            {
	            UpdateQty();
            }
            else
            {
                ResetQty();
            }
        }

	    private void ResetQty()
	    {
		    foreach (KeyValuePair<string, C_Shelf> cShelf in cShelves)
		    {
			    cShelf.Value.ShowCigQty(0);
		    }
	    }

	    private void UpdateQty()
	    {
            
            SortingLineBoxList sortingLineBoxList = SortingLineBoxList.GetLineNonBoxList();
            SortingLineBoxList dynamicsortingLineBoxList = SortingLineBoxList.GetDynamicLineBoxList();

	        foreach (SortingLineBox sortingLineBox in dynamicsortingLineBoxList)
	        {
	            try
	            {
                    cShelves[sortingLineBox.LineBoxCode].ShowCigQty(sortingLineBox.NONQTY);
	            }
	            catch (Exception)
	            {
	                
	                
	            }
                
	        }


            foreach (SortingLineBox sortingLineBox in sortingLineBoxList)
            {
                try
                {
                    cShelves[sortingLineBox.LineBoxCode].ShowCigQty(sortingLineBox.NONQTY);
                }
                catch (Exception)
                {
                    
                    
                }
                
            }
        }

	    private void chkshowname_CheckedChanged(object sender, EventArgs e)
        {
            
            foreach (KeyValuePair<string, C_Shelf> cShelf in cShelves)
            {
                ((C_Shelf)cShelf.Value).ShowCigName(chkshowname.Checked);
            }
        }


        void cSortingTask_OnUpdateCSortingMainNumEvent(object sender, UpdateCSortingMainNumEventArgs e)
        {
            this.Invoke(new Action(UpdateLineboxNum));
        }


        private void UpdateLineboxNum()
        {
           
            foreach (KeyValuePair<int, int> cigNum in TagSdk.instance.CigNums)
            {
                if (cigNum.Value == 0)
                {
                    cShelves[cigNum.Key.ToString()].PickNum = "";
                }
                else
                {
                    cShelves[cigNum.Key.ToString()].PickNum = cigNum.Value.ToString();  
                }
                
            }
        }

        void cSortingTask_OnUpdateCSortingMainCubeEvent(object sender, EventArgs e)
        {
            this.Invoke(new Action(UpdateCubes));
            
        }

        private void UpdateCubes()
        {
            foreach (KeyValuePair<string, Cube> keyValuePair in SortingLineTaskQueue.GetInstance().Cubes)
            {
                //cCubes[keyValuePair.Key]是界面的控件
                //keyValuePair.Value是获取的控件的内容,来源于Cube类
                cCubes[keyValuePair.Key].labcustname.Text = keyValuePair.Value.Customername;
                cCubes[keyValuePair.Key].labfinnum.Text = keyValuePair.Value.FinCignum.ToString();
                cCubes[keyValuePair.Key].labindexno.Text = keyValuePair.Value.Indexno.ToString();
                cCubes[keyValuePair.Key].SetTooltip(Convert.ToInt32(keyValuePair.Key),keyValuePair.Value.FinSortingLineTaskDetails);
            }

        }

        private void btnrefresh_Click(object sender, EventArgs e)
        {
            //ResetCmain();
        }

        public void ResetCmain()
        {
            foreach (KeyValuePair<string, CCube> keyValuePair in cCubes)
            {
                keyValuePair.Value.labcustname.Text = "无任务";
                keyValuePair.Value.labfinnum.Text = "0";
                keyValuePair.Value.labindexno.Text = "0";
                keyValuePair.Value.SetTooltip();
            }

            foreach (KeyValuePair<string, C_Shelf> keyValuePair in cShelves)
            {
                keyValuePair.Value.PickNum = "";
            }
        }

        private void ReLoadCube()
        {
            foreach (KeyValuePair<string, CCube> keyValuePair in cCubes)
            {
                keyValuePair.Value.labcustname.Text = "无任务";
                keyValuePair.Value.labfinnum.Text = "0";
                keyValuePair.Value.labindexno.Text = "0";
                keyValuePair.Value.SetTooltip();
            }

            sortingSubLineList = SortingSubLineList.GetSubSortingLineList();
            SortingLineTaskQueue.GetInstance().LoadSortingLineTasks();

            try
            {
                for (int j = 0; j < sortingSubLineList.Count; j++)
                {
                    cCubes[(j + 1).ToString()].labcustname.Text =
                        SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].Customername;
                    cCubes[(j + 1).ToString()].labfinnum.Text =
                        SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].FinCignum.ToString();
                    cCubes[(j + 1).ToString()].labindexno.Text =
                        SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].Indexno.ToString();
                    cCubes[(j + 1).ToString()].SetTooltip((j + 1),
                        SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].FinSortingLineTaskDetails);
                }
            }
            catch (Exception)
            {
            }
        }

        private void btnissued_Click(object sender, EventArgs e)
        {
            SortingTaskIssued sortingTaskIssued = SortingTaskIssued.GetSortingTaskIssued("0");
            sortingTaskIssued.PLCFLAG = 0;
            sortingTaskIssued.Save();
        }
    }
}