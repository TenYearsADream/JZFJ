using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using BusinessLogic;
using BusinessLogic.Common;
using BusinessLogic.Search;
using BusinessLogic.SortingTask;
using HDWLogic;
using HDWLogic.Issued;

namespace MonitorMain.CustomContorl
{
    public partial class C_SortingMain : UserControl
    {
        private Dictionary<string, C_Shelf> cShelves;
        private List<C_Shelf> cUpShelves;
        private List<C_Shelf> cDownShelves;
        private Dictionary<string, CCube> cCubes;
        private Dictionary<string, FlowLayoutPanel> flowLayoutPanels; 
        private SortingSubLineList sortingSubLineList;

        public C_SortingMain()
        {
            SetStyle(ControlStyles.UserPaint, true);
            SetStyle(ControlStyles.AllPaintingInWmPaint, true); // 禁止擦除背景.
            SetStyle(ControlStyles.DoubleBuffer, true); //双缓冲
            this.UpdateStyles();
            InitializeComponent();
            Dock = DockStyle.Fill;
            
        }

        


        private C_Shelf CreateShelf(SortingLineBox sortingLineBox)
        {
            C_Shelf c_Shelf = new C_Shelf(sortingLineBox);
            //c_Shelf.SetTooltip();
            c_Shelf.Name = sortingLineBox.LineBoxCode;
            return c_Shelf;
        }

        protected override CreateParams CreateParams
        {
            get
            {
                CreateParams cp = base.CreateParams;
                cp.ExStyle |= 0x02000000;
                return cp;
            }
        }

        private void C_SortingMain_Load(object sender, EventArgs e)
        {
            SortingLineTaskQueue.OnUpdateCSortingMainCubeEvent +=
                new EventHandler<EventArgs>(cSortingTask_OnUpdateCSortingMainCubeEvent);
            CSortingTask.OnUpdateCSortingMainNumEvent +=
                new EventHandler<UpdateCSortingMainNumEventArgs>(cSortingTask_OnUpdateCSortingMainNumEvent);
            if (IsVerifyPass())
            {
                MonitorLog monitorLog;
                monitorLog = MonitorLog.NewMonitorLog();
                monitorLog.LOGNAME = "数据库读取";
                monitorLog.LOGINFO = "订单数据读取成功!";
                monitorLog.LOGLOCATION = "数据库";
                monitorLog.LOGTYPE = 1;
                monitorLog.Save();
            }

            //获取任务列表
            SortingLineTaskQueue.GetInstance().LoadSortingLineTasks();
            LoadLinBox();
            LoadCube();

            TagSdk tagSdk = TagSdk.instance;

            chkshowqty.Checked = true;

        }

        private bool IsVerifyPass()
        {
            SortingLineTask.IsCurrentOrder();

            SortingLineTask.IsIndexRepetition();

            return true;
        }


        /// <summary>
        /// 加载小车控件
        /// </summary>
        private void LoadCube()
        {
            //获取小车的数据模型
            SortingLineTaskQueue.GetInstance().LoadSortingLineTasks();
            SortingLineTaskQueue.GetInstance().GetCubes();
            sortingSubLineList = SortingSubLineList.GetSubSortingLineList();

            //建立全空的小车控件
            this.tableLayoutPanel1.ColumnCount = sortingSubLineList.Count+1;
            this.tableLayoutPanel1.ColumnStyles.Clear();
            foreach (SortingSubLine sortingSubLine in sortingSubLineList)
            {
                tableLayoutPanel1.ColumnStyles.Add(
                    new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, cShelves.FirstOrDefault().Value.Width*2+2));
            }

            for (int j = 0; j < sortingSubLineList.Count; j++)
            {
                CCube cCube = new CCube();
                cCube.Dock = DockStyle.Fill;
                cCube.Name = "ccube" + j;
                cCube.Margin = new Padding(0, 0, 0, 0);
                cCube.labcustname.Text = "无任务";
                cCube.labfinnum.Text = "0";
                cCube.labindexno.Text = "0";
                cCube.panelno.Text = (j+1).ToString();
                cCube.Tag = sortingSubLineList[j].sublineCode;
                cCube.Margin = new Padding(0, 0, 1, 0);
                cCubes.Add(sortingSubLineList[j].sublineCode,cCube);

                

                //根据小车的数据模型填充小车控件
                try
                {
                    cCube.labcustname.Text = SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].Customername;
                    cCube.labfinnum.Text = SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].FinCignum.ToString();

                    //如果小车中卷烟数量与总量显示为红色
                    if (SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].FinCignum == SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].TotCignum)
                    {
                        cCube.labfinnum.ForeColor = Color.Red;
                    }
                    else
                    {
                        cCube.labfinnum.ForeColor = Color.Black;
                    }

                    cCube.labindexno.Text = SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].Indexno.ToString();
                    cCube.SetTooltip((j+1),SortingLineTaskQueue.GetInstance().Cubes[(j + 1).ToString()].TotSortingLineTaskDetails);

                }
                catch (Exception)
                {


                }
                tableLayoutPanel1.Controls.Add(cCube, j, 0);
            }

        }

        /// <summary>
        /// 加载烟仓控件
        /// </summary>
        public void LoadLinBox()
        {
            //建立空的烟仓控件
            SortingLineBoxList sortingLineBoxList = SortingLineBoxList.GetLineBoxList();

            cCubes = new Dictionary<string, CCube>();
            cShelves = new Dictionary<string, C_Shelf>();
            cUpShelves = new List<C_Shelf>();
            cDownShelves =  new List<C_Shelf>();

            flowLayoutPanel1.Controls.Clear();
            flowLayoutPanel2.Controls.Clear();
            if (sortingLineBoxList.Count > 0)
            {
                foreach (SortingLineBox sortingLineBox in sortingLineBoxList)
                {
                    if (Convert.ToInt32(sortingLineBox.LineBoxCode) % 2 == 1)
                    {
                        C_Shelf cShelf = CreateShelf(sortingLineBox);
                        cShelves.Add(cShelf.Name, cShelf);
                        cUpShelves.Add(cShelf);
                        cShelf.Margin = new Padding(0, 0, 1, 0);
                        //cShelf.PickNum = "111";
                        //flowLayoutPanel1.Controls.Add(cShelf);
                    }
                    else
                    {
                        C_Shelf cShelf = CreateShelf(sortingLineBox);
                        cShelves.Add(cShelf.Name, cShelf);
                        cDownShelves.Add(cShelf);
                        cShelf.Margin = new Padding(0, 0, 1, 0);
                        //flowLayoutPanel2.Controls.Add(cShelf);
                    }
                    
                }

                FlowLayoutPanel flowLayoutPanel = null;
                bool j = true;
                for (int i = 0; i < cUpShelves.Count; i++)
                {
                    if (i % 2 == 0)
                    {
                        flowLayoutPanel = new FlowLayoutPanel();
                        if (j)
                        {
                            flowLayoutPanel.BackColor = System.Drawing.Color.Silver;
                            j = false;
                        }
                        else
                        {
                            flowLayoutPanel.BackColor = System.Drawing.Color.SlateGray;
                            j = true;
                        }
                        
                        flowLayoutPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                        flowLayoutPanel.Dock = System.Windows.Forms.DockStyle.None;
                        flowLayoutPanel.Margin = new System.Windows.Forms.Padding(0, 0, 1, 0);
                        flowLayoutPanel.Size = new System.Drawing.Size(41, flowLayoutPanel1.Height);
                        flowLayoutPanel.WrapContents = false;
                        flowLayoutPanel1.Controls.Add(flowLayoutPanel);
                    }
                    flowLayoutPanel.Controls.Add(cUpShelves[i]);
                }

                j = true;
                for (int i = 0; i < cDownShelves.Count; i++)
                {
                    if (i % 2 == 0)
                    {
                        flowLayoutPanel = new FlowLayoutPanel();
                        if (j)
                        {
                            flowLayoutPanel.BackColor = System.Drawing.Color.Silver;
                            j = false;
                        }
                        else
                        {
                            flowLayoutPanel.BackColor = System.Drawing.Color.SlateGray;
                            j = true;
                        }
                        flowLayoutPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                        flowLayoutPanel.Dock = System.Windows.Forms.DockStyle.None;
                        flowLayoutPanel.Margin = new System.Windows.Forms.Padding(0, 0, 1, 0);
                        flowLayoutPanel.Size = new System.Drawing.Size(41, flowLayoutPanel1.Height);
                        flowLayoutPanel.WrapContents = false;
                        flowLayoutPanel2.Controls.Add(flowLayoutPanel);
                    }
                    flowLayoutPanel.Controls.Add(cDownShelves[i]);
                }
            }

            //如果不能下达任务根据老的列表，给数码管发信号
            SortingTaskIssued sortingTaskIssued = SortingTaskIssued.GetSortingTaskIssued("0");
            if (sortingTaskIssued.PLCFLAG == 1)
            {
                TagSdk.instance.CigNums =
                    NixielightSDK.SetOrderNixielight(SortingLineTaskQueue.GetInstance().SortingLineTasks);
                UpdateLineboxNum();
            }

            //是否显示烟仓容量
            if (chkshowqty.Checked)
            {
                chkshowqty_CheckedChanged(null, null);
            }
        }


        

        private void chkshowqty_CheckedChanged(object sender, EventArgs e)
        {
            UpdateLineboxCapacity();
        }

        /// <summary>
        /// 更新盘点信息
        /// </summary>
        public void UpdateLineboxCapacity()
        {
            if (chkshowqty.Checked)
            {
                SortingLineBoxList sortingLineBoxList = SortingLineBoxList.GetLineNonBoxList();
                SortingLineBoxList dynamicsortingLineBoxList = SortingLineBoxList.GetDynamicLineBoxList();

                foreach (KeyValuePair<string, Cube> keyValuePair in SortingLineTaskQueue.GetInstance().Cubes)
                {
                    try
                    {
                        if (keyValuePair.Value.FinSortingLineTaskDetails != null)
                        {
                            foreach (SortingLineTaskDetail sortingLineTaskDetail in keyValuePair.Value.FinSortingLineTaskDetails)
                            {
                                SortingLineBox sortingLineBox =
                                    sortingLineBoxList.First(item => item.LineBoxCode == sortingLineTaskDetail.LINEBOXCODE);
                                sortingLineBox.NONQTY = sortingLineBox.NONQTY - sortingLineTaskDetail.QTY;

                            }

                        }
                    }
                    catch (Exception)
                    {
                        
                    }
                    
                    
                }


                foreach (SortingLineBox sortingLineBox in dynamicsortingLineBoxList)
                {
                    try
                    {
                        cShelves[sortingLineBox.LineBoxCode].ShowCigQty(sortingLineBox.NONQTY);
                        cShelves[sortingLineBox.LineBoxCode].SetTooltip(sortingLineBox.NONQTY,sortingLineBox.TOTQTY);
                    }
                    catch (Exception)
                    {
                    }
                }


                foreach (SortingLineBox sortingLineBox in sortingLineBoxList)
                {
                    try
                    {
                        cShelves[sortingLineBox.LineBoxCode].ShowCigQty(sortingLineBox.NONQTY);
                        cShelves[sortingLineBox.LineBoxCode].SetTooltip(sortingLineBox.NONQTY, sortingLineBox.TOTQTY);
                    }
                    catch (Exception)
                    {
                    }
                }
            }
            else
            {
                foreach (KeyValuePair<string, C_Shelf> cShelf in cShelves)
                {
                    cShelf.Value.ShowCigQty(0);
                }
            }
        }


        private void chkshowname_CheckedChanged(object sender, EventArgs e)
        {
            
            foreach (KeyValuePair<string, C_Shelf> cShelf in cShelves)
            {
                ((C_Shelf)cShelf.Value).ShowCigName(chkshowname.Checked);
            }
        }


        void cSortingTask_OnUpdateCSortingMainNumEvent(object sender, UpdateCSortingMainNumEventArgs e)
        {
            this.Invoke(new Action(UpdateLineboxNum));
        }


        private void UpdateLineboxNum()
        {
           
            foreach (KeyValuePair<int, int> cigNum in TagSdk.instance.CigNums)
            {
                if (cigNum.Value == 0)
                {
                    cShelves[cigNum.Key.ToString()].PickNum = "";
                }
                else
                {
                    cShelves[cigNum.Key.ToString()].PickNum = cigNum.Value.ToString();  
                }
                
            }
        }

        void cSortingTask_OnUpdateCSortingMainCubeEvent(object sender, EventArgs e)
        {
            this.Invoke(new Action(UpdateCubes));
        }

        private void UpdateCubes()
        {
            if (cCubes.Count > 0)
            {
                foreach (
                    KeyValuePair<string, Cube> cubeKeyValuePairValuePair in SortingLineTaskQueue.GetInstance().Cubes)
                {
                    //cCubes[cubeKeyValuePairValuePair.Key]是界面的控件
                    //cubeKeyValuePairValuePair.Value是获取的控件的内容,来源于Cube类
                    cCubes[cubeKeyValuePairValuePair.Key].labcustname.Text =
                        cubeKeyValuePairValuePair.Value.Customername;
                    cCubes[cubeKeyValuePairValuePair.Key].labfinnum.Text =
                        cubeKeyValuePairValuePair.Value.FinCignum.ToString();
                    //如果小车中卷烟数量与总量显示为红色
                    if (cubeKeyValuePairValuePair.Value.FinCignum == cubeKeyValuePairValuePair.Value.TotCignum)
                    {
                        cCubes[cubeKeyValuePairValuePair.Key].labfinnum.ForeColor = Color.Red;
                    }
                    else
                    {
                        cCubes[cubeKeyValuePairValuePair.Key].labfinnum.ForeColor = Color.Black;
                    }
                    cCubes[cubeKeyValuePairValuePair.Key].labindexno.Text =  
                                                                            cubeKeyValuePairValuePair.Value.Indexno
                                                                                .ToString() ;
                    cCubes[cubeKeyValuePairValuePair.Key].SetTooltip(Convert.ToInt32(cubeKeyValuePairValuePair.Key),
                        cubeKeyValuePairValuePair.Value.TotSortingLineTaskDetails);
                }
            }
        }

        private void btnrefresh_Click(object sender, EventArgs e)
        {
            //ResetCmain();
        }

        public void ResetCmain()
        {
            foreach (KeyValuePair<string, CCube> keyValuePair in cCubes)
            {
                keyValuePair.Value.labcustname.Text = "无任务";
                keyValuePair.Value.labfinnum.Text = "0";
                keyValuePair.Value.labindexno.Text = "0";
                keyValuePair.Value.SetTooltip();
            }

            foreach (KeyValuePair<string, C_Shelf> keyValuePair in cShelves)
            {
                keyValuePair.Value.PickNum = "";
            }
        }

       

        private void btnissued_Click(object sender, EventArgs e)
        {
            SortingLineTaskQueue.GetInstance().Move();

            SortingTaskIssued sortingTaskIssued = SortingTaskIssued.GetSortingTaskIssued("0");
            sortingTaskIssued.PLCFLAG = 0;
            sortingTaskIssued.Save();


        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            UpdateLineboxCapacity();
        }

        private void btnedit_Click(object sender, EventArgs e)
        {
            frmEditCubeLocation frmEditCubeLocation = new frmEditCubeLocation(cCubes["1"].Width);
            frmEditCubeLocation.OnUpdateCSortingMainCubeEvent += new EventHandler<EventArgs>(cSortingTask_OnUpdateCSortingMainCubeEvent);
            frmEditCubeLocation.ShowDialog();
        }
    }
}