// ########file = SortingLineTask.cs#############
// ########author = "祝旻" ##############
// ########created = 20140728#############
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Text;
using System.Threading;
using AppUtility;
using BusinessLogic.Box;
using BusinessLogic.Common;
using BusinessLogic.SortingProcess;
using Csla;
using Csla.Data;
using IBM.Data.DB2;
using MySql.Data.MySqlClient;

namespace BusinessLogic.SortingTask
{

    [Serializable]
    public class SortingLineTask : BusinessBase<SortingLineTask>
    {
        #region  Business Methods

        private static readonly PropertyInfo<string> IdProperty = RegisterProperty<string>(p => p.ID, "标识号");

        private static readonly PropertyInfo<int> SORTINGTASKNOProperty = RegisterProperty<int>(p => p.SORTINGTASKNO,
                                                                                                "主任务编号");

        private static readonly PropertyInfo<string> ORDERDATEProperty = RegisterProperty<string>(p => p.ORDERDATE,
                                                                                                  "订单日期");

        private static readonly PropertyInfo<string> PICKLINECODEProperty = RegisterProperty<string>(
            p => p.PICKLINECODE, "分拣线编号");

        private static readonly PropertyInfo<string> PICKLINENAMEProperty = RegisterProperty<string>(
            p => p.PICKLINENAME, "分拣线名称");

        private static readonly PropertyInfo<string> CUSTCODEProperty = RegisterProperty<string>(p => p.CUSTCODE, "客户编号");

        private static readonly PropertyInfo<string> CUSTNAMEProperty = RegisterProperty<string>(p => p.CUSTNAME, "客户姓名");

        private static readonly PropertyInfo<int> INDEXNOProperty = RegisterProperty<int>(p => p.INDEXNO, "流水号");

        private static readonly PropertyInfo<string> OUTPORTProperty = RegisterProperty<string>(p => p.OUTPORT, "出烟口");

        private static readonly PropertyInfo<string> LINECODEProperty = RegisterProperty<string>(p => p.LINECODE, "送货线路号");

        private static readonly PropertyInfo<string> LINENAMEProperty = RegisterProperty<string>(p => p.LINENAME, "送货线路名称");

        private static readonly PropertyInfo<string> CORPCODEProperty = RegisterProperty<string>(p => p.CORPCODE, "区域代码");

        private static readonly PropertyInfo<string> CORPNAMEProperty = RegisterProperty<string>(p => p.CORPNAME, "区域名称");

        private static readonly PropertyInfo<string> ShortNameProperty = RegisterProperty<string>(p => p.ShortName, "简称");

        private static readonly PropertyInfo<int> StatusProperty = RegisterProperty<int>(p => p.Status, "订单任务的状态");

        private static readonly PropertyInfo<int> PLCADDRESSProperty = RegisterProperty<int>(p => p.PLCADDRESS, "PLC虚出口号");


        private static readonly PropertyInfo<DateTime> SortingTimeProperty =
            RegisterProperty<DateTime>(p => p.SortingTime, "分拣任务下达时间");

        private static readonly PropertyInfo<DateTime> FinishTimeProperty =
            RegisterProperty<DateTime>(p => p.FinishTime, "分拣完成时间");


        private static readonly PropertyInfo<SortingLineTaskDetails> SortingLineTaskDetailsProperty =
            RegisterProperty<SortingLineTaskDetails>(p => p.SortingLineTaskDetails, "订单明细列表");

        

        public string ID
        {
            get { return GetProperty(IdProperty); }
            set { SetProperty(IdProperty, value); }
        }

        public int SORTINGTASKNO
        {
            get { return GetProperty(SORTINGTASKNOProperty); }
            set { SetProperty(SORTINGTASKNOProperty, value); }
        }

        public string ORDERDATE
        {
            get { return GetProperty(ORDERDATEProperty); }
            set { SetProperty(ORDERDATEProperty, value); }
        }

        public string PICKLINECODE
        {
            get { return GetProperty(PICKLINECODEProperty); }
            set { SetProperty(PICKLINECODEProperty, value); }
        }

        public string PICKLINENAME
        {
            get { return GetProperty(PICKLINENAMEProperty); }
            set { SetProperty(PICKLINENAMEProperty, value); }
        }

        public string CUSTCODE
        {
            get { return GetProperty(CUSTCODEProperty); }
            set { SetProperty(CUSTCODEProperty, value); }
        }

        public string CUSTNAME
        {
            get { return GetProperty(CUSTNAMEProperty); }
            set { SetProperty(CUSTNAMEProperty, value); }
        }

        public Int32 INDEXNO
        {
            get { return GetProperty(INDEXNOProperty); }
            set { SetProperty(INDEXNOProperty, value); }
        }

        public string OUTPORT
        {
            get { return GetProperty(OUTPORTProperty); }
            set { SetProperty(OUTPORTProperty, value); }
        }

        public string LINECODE
        {
            get { return GetProperty(LINECODEProperty); }
            set { SetProperty(LINECODEProperty, value); }
        }

        public string LINENAME
        {
            get { return GetProperty(LINENAMEProperty); }
            set { SetProperty(LINENAMEProperty, value); }
        }

        public string CORPCODE
        {
            get { return GetProperty(CORPCODEProperty); }
            set { SetProperty(CORPCODEProperty, value); }
        }

        public string CORPNAME
        {
            get { return GetProperty(CORPNAMEProperty); }
            set { SetProperty(CORPNAMEProperty, value); }
        }

        public string ShortName
        {
            get { return GetProperty(ShortNameProperty); }
            set { SetProperty(ShortNameProperty, value); }
        }

        public int PLCADDRESS
        {
            get { return GetProperty(PLCADDRESSProperty); }
            set { SetProperty(PLCADDRESSProperty, value); }
        }



        public Int32 Status
        {
            get { return GetProperty(StatusProperty); }
            set { SetProperty(StatusProperty, value); }
        }

        public DateTime SortingTime
        {
            get { return GetProperty(SortingTimeProperty); }
            set { SetProperty(SortingTimeProperty, value); }
        }

        public DateTime FinishTime
        {
            get { return GetProperty(FinishTimeProperty); }
            set { SetProperty(FinishTimeProperty, value); }
        }

        public SortingLineTaskDetails SortingLineTaskDetails
        {
            get { return GetProperty(SortingLineTaskDetailsProperty); }
            set { SetProperty(SortingLineTaskDetailsProperty, value); }
        }

        public List<CigBoxInfo> CigBoxInfos { get; set; }

        #endregion

        #region  Factory Methods

        private SortingLineTask()
        {
            /* require use of factory methods */
        }

        public static SortingLineTask GetSortingLineTask(SafeDataReader dr)
        {
            return DataPortal.Fetch<SortingLineTask>(dr);
        }

        public static SortingLineTask GetSortingLineTask()
        {
            return DataPortal.Fetch<SortingLineTask>();
        }

        public static SortingLineTask GetSortingLineByIndex(string index)
        {
            return DataPortal.Fetch<SortingLineTask>(index);
        }

        public static SortingLineTask GetMinSortingLineTask()
        {
            return DataPortal.Fetch<SortingLineTask>();
        }

        public void SaveSortingTaskProcess(string plctaskid)
        {
            SortingTaskProgress sortingTaskProgress = null;
            sortingTaskProgress = SortingTaskProgress.GetSortingTaskProgress(ID);

            if (Status == 0)
            {
                
                sortingTaskProgress.STATUS = Status;
                sortingTaskProgress.SORTINGTIME = null;
                sortingTaskProgress.FINISHTIME = null;
                sortingTaskProgress.PLCTASKID = plctaskid;
                if (sortingTaskProgress != null) sortingTaskProgress.Save();  
            }
            if (Status == 1)
            {
                
                sortingTaskProgress.STATUS = Status;
                sortingTaskProgress.SORTINGTIME = DateTime.Now;
                sortingTaskProgress.FINISHTIME = null;
                sortingTaskProgress.PLCTASKID = plctaskid;
                if (sortingTaskProgress != null) sortingTaskProgress.Save();  
            }
            if (Status == 2)

            {
                sortingTaskProgress.STATUS = Status;
                if (sortingTaskProgress.SORTINGTIME == null)
                {
                    sortingTaskProgress.SORTINGTIME = DateTime.Now;
                }
                sortingTaskProgress.FINISHTIME = DateTime.Now;
                sortingTaskProgress.PLCTASKID = plctaskid;
                if (sortingTaskProgress != null) sortingTaskProgress.Save();  
            }

                   




            //重汇分拣进度
            try
            {
                Thread thread1 = new Thread(new ParameterizedThreadStart(SortingProcessList.GetSortingProcessList));
                Thread thread2 = new Thread(SortingProcessList.UpdateEfficincy);
                thread1.Start(SortingLine.GetNonSortingLineCode());
                thread2.Start();
            }
            catch (Exception)
            {
            }
        }


        public void SaveStatus()
        {
            using (var cn = new MySqlConnection(AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (MySqlTransaction tran = cn.BeginTransaction())
                {
                    try
                    {
                        using (var cm = cn.CreateCommand())
                        {
                            cm.Transaction = tran;
                            cm.CommandText =
                                "UPDATE	t_sorting_line_task s JOIN (SELECT	max(s.INDEXNO) indexno	FROM		t_sorting_line_task s	WHERE		s.`STATUS` = 2) t ON s.INDEXNO < t.indexno AND s.`STATUS` = 1 SET s.`STATUS` = 2 , FINISHTIME = @FINISHTIME ";
                            cm.Parameters.AddWithValue("@FINISHTIME", DateTime.Now);
                            cm.ExecuteNonQuery();
                        }
                        tran.Commit();
                    }
                    catch (Exception)
                    {
                        tran.Rollback();
                        throw;
                    }
                }
            }
        
        }


        public static string GetSortingLineTaskDateByNo()
        {
            string sortingdate = "";
            string taskno = "";
            using (var cn = new MySqlConnection(AppUtility.AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {
                    cm.CommandText = "select * from t_sorting_line_task limit 1";
                    using (var dr = new SafeDataReader(cm.ExecuteReader()))
                    {
                        while (dr.Read())
                        {
                            taskno = dr.GetString("SORTINGTASKNO");
                            sortingdate = dr.GetString("ORDERDATE") + ":" + taskno;
                        }
                    }
                }

            }
            return sortingdate;
        }

        public static string GetSortingLineTaskDate()
        {
            string sortingdate = "";
            string taskno = "";
            using (var cn = new MySqlConnection(AppUtility.AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {
                    cm.CommandText = "select * from t_sorting_line_task limit 1";
                    using (var dr = new SafeDataReader(cm.ExecuteReader()))
                    {
                        while (dr.Read())
                        {
                            taskno = dr.GetString("SORTINGTASKNO");
                            sortingdate = dr.GetString("ORDERDATE");
                        }
                    }
                }

            }
            return sortingdate;
        }

        public static string GetSortingLineTaskNo()
        {
            string sortingdate = "";
            string taskno = "";
            using (var cn = new MySqlConnection(AppUtility.AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {
                    cm.CommandText = "select * from t_sorting_line_task limit 1";
                    using (var dr = new SafeDataReader(cm.ExecuteReader()))
                    {
                        while (dr.Read())
                        {
                            taskno = dr.GetString("SORTINGTASKNO");
                            sortingdate = dr.GetString("ORDERDATE");
                        }
                    }
                }

            }
            return taskno;
        }


        public static string GetServerSortingLineTaskDate()
        {
            string sortingdate = "";
            string taskno = "";
            using (var cn = new DB2Connection(AppUtility.AppUtil._FjInfoConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {
                    cm.CommandText = "select * from t_sorting_line_task s JOIN t_sortingline sl ON s.PICKLINECODE = sl.lineCode WHERE sl.linetype='1'  order by orderdate desc fetch first 1 row only";
                    using (var dr = new SafeDataReader(cm.ExecuteReader()))
                    {
                        while (dr.Read())
                        {
                            taskno = dr.GetString("TASKNO");
                            sortingdate = dr.GetString("ORDERDATE") + ":" + taskno;
                        }
                    }
                }

            }
            return sortingdate;
        }

        /// <summary>
        /// 更新分拣优化程序中当前订单状态为已下载
        /// </summary>
        /// <param name="status"></param>
        static public void UploadSortingStatus(int status)
        {
            string sortingdate = "";
            string taskno = "";
            using (var cn = new MySqlConnection(AppUtility.AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {
                    cm.CommandText = "select * from t_sorting_line_task limit 1";
                    using (var dr = new SafeDataReader(cm.ExecuteReader()))
                    {
                        while (dr.Read())
                        {
                            taskno = dr.GetString("SORTINGTASKNO");
                            sortingdate = dr.GetString("ORDERDATE");
                        }
                    }
                }

            }

            using (var remotecn = new DB2Connection(AppUtility.AppUtil._FjInfoConnectionString))
            {
                remotecn.Open();

                using (var remotecm = remotecn.CreateCommand())
                {
                    remotecm.CommandText = "UPDATE tsp_plan SET pickStatus = " + status + " WHERE orderDate = '" + sortingdate + "' and taskNo = '" + taskno + "'";
                    remotecm.ExecuteNonQuery();
                }
            }
        }
        
        /// <summary>
        /// 合计分拣任务中的订单总量
        /// </summary>
        /// <returns></returns>
        public int SumOrderNumber()
        {
            int ordernumber = 0;
            foreach (var sortingLineTaskDetail in SortingLineTaskDetails)
            {
                ordernumber += sortingLineTaskDetail.QTY;
            }
            return ordernumber;
        }

        /// <summary>
        /// 合计分拣任务中1到36烟仓总量
        /// </summary>
        /// <returns></returns>
        public int Sum1TO36OrderNumber()
        {
            int ordernumber = 0;
            foreach (var sortingLineTaskDetail in SortingLineTaskDetails)
            {
                if (Int32.Parse(sortingLineTaskDetail.ADDRESSCODE) <= 36)
                {
                    ordernumber += sortingLineTaskDetail.QTY;
                }
                
            }
            return ordernumber;
        }

        /// <summary>
        /// 合计分拣任务中67到74烟仓总量
        /// </summary>
        /// <returns></returns>
        public int Sum37TO72OrderNumber()
        {
            int ordernumber = 0;
            foreach (var sortingLineTaskDetail in SortingLineTaskDetails)
            {
                if (Int32.Parse(sortingLineTaskDetail.ADDRESSCODE) <= 72 &&
                    Int32.Parse(sortingLineTaskDetail.ADDRESSCODE) >= 37)
                {
                    ordernumber += sortingLineTaskDetail.QTY;
                }
            }
            return ordernumber;
        }

        public int Sum73TO84OrderNumber()
        {
            int ordernumber = 0;
            foreach (var sortingLineTaskDetail in SortingLineTaskDetails)
            {
                if (Int32.Parse(sortingLineTaskDetail.ADDRESSCODE) <= 84 &&
                    Int32.Parse(sortingLineTaskDetail.ADDRESSCODE) >= 73)
                {
                    ordernumber += sortingLineTaskDetail.QTY;
                }
            }
            return ordernumber;
        }

        public int Sum85TO90OrderNumber()
        {
            int ordernumber = 0;
            foreach (var sortingLineTaskDetail in SortingLineTaskDetails)
            {
                if (Int32.Parse(sortingLineTaskDetail.ADDRESSCODE) <= 89 &&
                    Int32.Parse(sortingLineTaskDetail.ADDRESSCODE) >= 85)
                {
                    ordernumber += sortingLineTaskDetail.QTY;
                }
            }
            ordernumber += Sum73TO84OrderNumber();
            return ordernumber;
        }

        public int Sum91TO92OrderNumber()
        {
            int ordernumber = 0;
            ordernumber += Sum1TO36OrderNumber() + Sum37TO72OrderNumber();
            return ordernumber;
        }

        public Dictionary<string, int> GetNLSortingLineTask(int indexno)
        {
            Dictionary<string, int> sortingLineTask  = new Dictionary<string, int>();;
            using (var cn = new MySqlConnection(AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {

                    cm.CommandText =
                        "SELECT t.1num,sum(t.QTY) qty FROM " +
                        "(select d.LINEBOXCODE,g.boxCode,CASE WHEN g.boxCode is null THEN d.LINEBOXCODE ELSE  g.boxCode end as 1num,d.QTY " +
                        "FROM t_sorting_line_task s JOIN t_sorting_line_detail_task d ON s.ID = d.TASKID " +
                        "JOIN t_linebox l ON d.LINEBOXCODE = l.boxCode " +
                        "LEFT JOIN t_linebox g ON l.groupId = g.groupId AND l.putNum >1 AND g.putNum =1 " +
                        "WHERE l.putNum in (1,2) AND s.INDEXNO = " + indexno + ") t GROUP BY t.1num ORDER BY t.1num * 1 ";
                    //cm.Parameters.AddWithValue("@id", criteria.Value);
                    using (var dr = new SafeDataReader(cm.ExecuteReader()))
                    {
                        while (dr.Read())
                        {
                          sortingLineTask.Add(dr.GetString("1num"),dr.GetInt32("qty"));
                        }
                    }
                }
            }
            return sortingLineTask;
        }

        #endregion

        #region  Data Access

        private void DataPortal_Fetch(SafeDataReader dr)
        {
            LoadProperty(IdProperty, dr.GetString("ID"));
            LoadProperty(SORTINGTASKNOProperty, dr.GetString("SORTINGTASKNO"));
            LoadProperty(ORDERDATEProperty, dr.GetString("ORDERDATE"));
            LoadProperty(PICKLINECODEProperty, dr.GetString("PICKLINECODE"));
            LoadProperty(PICKLINENAMEProperty, dr.GetString("PICKLINENAME"));
            LoadProperty(CUSTCODEProperty, dr.GetString("CUSTCODE"));
            LoadProperty(CUSTNAMEProperty, dr.GetString("CUSTNAME"));
            LoadProperty(INDEXNOProperty, dr.GetInt32("INDEXNO"));
            LoadProperty(OUTPORTProperty, dr.GetString("OUTPORT"));
            LoadProperty(LINECODEProperty, dr.GetString("LINECODE"));
            LoadProperty(LINENAMEProperty, dr.GetString("LINENAME"));
            LoadProperty(CORPCODEProperty, dr.GetString("CORPCODE"));
            LoadProperty(CORPNAMEProperty, dr.GetString("CORPNAME"));
            LoadProperty(ShortNameProperty, dr.GetString("ShortName"));
            LoadProperty(StatusProperty, dr.GetInt32("Status"));
            LoadProperty(PLCADDRESSProperty, dr.GetInt32("PLCADDRESS"));
            LoadProperty(SortingTimeProperty, dr.GetDateTime("SortingTime"));
            LoadProperty(FinishTimeProperty, dr.GetDateTime("FinishTime"));
        }



        private void DataPortal_Fetch()
        {
            using (BypassPropertyChecks)
            {
                using (var cn = new MySqlConnection(AppUtil._LocalConnectionString))
                {
                    cn.Open();
                    using (var cm = cn.CreateCommand())
                    {
                        cm.CommandText =
                            "SELECT * FROM T_SORTING_LINE_TASK t WHERE t.status = 0 order by t.indexno limit 1";
                        //cm.Parameters.AddWithValue("@id", criteria.Value);
                        using (var dr = new SafeDataReader(cm.ExecuteReader()))
                        {
                            while (dr.Read())
                            {
                                LoadProperty(IdProperty, dr.GetString("ID"));
                                LoadProperty(SORTINGTASKNOProperty, dr.GetString("SORTINGTASKNO"));
                                LoadProperty(ORDERDATEProperty, dr.GetString("ORDERDATE"));
                                LoadProperty(PICKLINECODEProperty, dr.GetString("PICKLINECODE"));
                                LoadProperty(PICKLINENAMEProperty, dr.GetString("PICKLINENAME"));
                                LoadProperty(CUSTCODEProperty, dr.GetString("CUSTCODE"));
                                LoadProperty(CUSTNAMEProperty, dr.GetString("CUSTNAME"));
                                LoadProperty(INDEXNOProperty, dr.GetInt32("INDEXNO"));
                                LoadProperty(OUTPORTProperty, dr.GetString("OUTPORT"));
                                LoadProperty(LINECODEProperty, dr.GetString("LINECODE"));
                                LoadProperty(LINENAMEProperty, dr.GetString("LINENAME"));
                                LoadProperty(CORPCODEProperty, dr.GetString("CORPCODE"));
                                LoadProperty(CORPNAMEProperty, dr.GetString("CORPNAME"));
                                LoadProperty(ShortNameProperty, dr.GetString("ShortName"));
                                LoadProperty(StatusProperty, dr.GetInt32("Status"));
                                LoadProperty(PLCADDRESSProperty, dr.GetInt32("PLCADDRESS"));
                                LoadProperty(SortingTimeProperty, dr.GetDateTime("SortingTime"));
                                LoadProperty(FinishTimeProperty, dr.GetDateTime("FinishTime"));
                            }
                        }
                    }

                    // load child objects
                    using (var cmProducts = cn.CreateCommand())
                    {
                        cmProducts.CommandText =
                            "SELECT * FROM T_SORTING_LINE_DETAIL_TASK tl WHERE tl.taskid =  @id order by tl.LINEBOXNAME";
                        cmProducts.Parameters.AddWithValue("@id", ID);
                        using (var drTaskDetails = new SafeDataReader(cmProducts.ExecuteReader()))
                        {
                            LoadProperty(SortingLineTaskDetailsProperty,
                                         SortingLineTaskDetails.GetSortingLineTaskDetails(drTaskDetails));
                        }
                    }
                }
            }
        }


        private void DataPortal_Fetch(string plctaskno)
        {
            using (BypassPropertyChecks)
            {
                using (var cn = new MySqlConnection(AppUtil._LocalConnectionString))
                {
                    cn.Open();
                    using (var cm = cn.CreateCommand())
                    {
                        cm.CommandText =
                            "SELECT * FROM T_SORTING_LINE_TASK t WHERE t.indexno = @plctaskno limit 1";
                        cm.Parameters.AddWithValue("@plctaskno", Convert.ToInt32(plctaskno));
                        using (var dr = new SafeDataReader(cm.ExecuteReader()))
                        {
                            while (dr.Read())
                            {
                                LoadProperty(IdProperty, dr.GetString("ID"));
                                LoadProperty(SORTINGTASKNOProperty, dr.GetString("SORTINGTASKNO"));
                                LoadProperty(ORDERDATEProperty, dr.GetString("ORDERDATE"));
                                LoadProperty(PICKLINECODEProperty, dr.GetString("PICKLINECODE"));
                                LoadProperty(PICKLINENAMEProperty, dr.GetString("PICKLINENAME"));
                                LoadProperty(CUSTCODEProperty, dr.GetString("CUSTCODE"));
                                LoadProperty(CUSTNAMEProperty, dr.GetString("CUSTNAME"));
                                LoadProperty(INDEXNOProperty, dr.GetInt32("INDEXNO"));
                                LoadProperty(OUTPORTProperty, dr.GetString("OUTPORT"));
                                LoadProperty(LINECODEProperty, dr.GetString("LINECODE"));
                                LoadProperty(LINENAMEProperty, dr.GetString("LINENAME"));
                                LoadProperty(CORPCODEProperty, dr.GetString("CORPCODE"));
                                LoadProperty(CORPNAMEProperty, dr.GetString("CORPNAME"));
                                LoadProperty(ShortNameProperty, dr.GetString("ShortName"));
                                LoadProperty(PLCADDRESSProperty, dr.GetInt32("PLCADDRESS"));
                                LoadProperty(StatusProperty, dr.GetInt32("Status"));
                                LoadProperty(SortingTimeProperty, dr.GetDateTime("SortingTime"));
                                LoadProperty(FinishTimeProperty, dr.GetDateTime("FinishTime"));
                            }


                        }

                        // load child objects
                        using (var cmProducts = cn.CreateCommand())
                        {
                            cmProducts.CommandText =
                                "SELECT * FROM T_SORTING_LINE_DETAIL_TASK tl WHERE tl.taskid =  @id order by tl.LINEBOXNAME";
                            cmProducts.Parameters.AddWithValue("@id", ID);
                            using (var drTaskDetails = new SafeDataReader(cmProducts.ExecuteReader()))
                            {
                                LoadProperty(SortingLineTaskDetailsProperty,
                                             SortingLineTaskDetails.GetSortingLineTaskDetails(drTaskDetails));
                            }
                        }
                    }

                }
            }
        }

        

        #endregion

        #region  Exists


        public static bool IsCurrentOrder()
        {
            using (var cn = new MySqlConnection(AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {
                    cm.CommandText =
                        "SELECT COUNT(1) FROM (SELECT  MAX(T_SORTING_LINE_TASK.ORDERDATE ) da FROM T_SORTING_LINE_TASK)  t WHERE t.da = @Date";
                    string a = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");
                    cm.Parameters.AddWithValue("@Date", DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd"));
                    if (int.Parse(cm.ExecuteScalar().ToString()) <= 0)
                    {
                        MonitorLog monitorLog = MonitorLog.NewMonitorLog();
                        monitorLog.LOGNAME = "数据库读取";
                        monitorLog.LOGINFO = "当前订单日期与系统日期不符合!";
                        monitorLog.LOGLOCATION = "数据库";
                        monitorLog.LOGTYPE = 2;
                        monitorLog.Save();
                        return false;
                    }

                    return true;
                }
            }
        }

        /// <summary>
        /// 同一批次是否存在重复的顺序号
        /// </summary>
        /// <returns></returns>
        public static bool IsIndexRepetition()
        {
            using (var cn = new MySqlConnection(AppUtil._LocalConnectionString))
            {
                cn.Open();
                using (var cm = cn.CreateCommand())
                {
                    cm.CommandText =
                        "SELECT INDEXNO,COUNT(1)  FROM t_sorting_line_task  GROUP BY  INDEXNO HAVING count(1)> 1";
                    using (var dr = new SafeDataReader(cm.ExecuteReader()))
                    {
                        while (dr.Read())
                        {
                            MonitorLog monitorLog = MonitorLog.NewMonitorLog();
                            monitorLog.LOGNAME = "数据库读取";
                            monitorLog.LOGINFO = "当前分拣任务存在重复的顺序号,无法开始分拣！";
                            monitorLog.LOGLOCATION = "数据库";
                            monitorLog.LOGTYPE = 2;
                            monitorLog.Save();
                            return true;
                        }
                    }
                    return false;
                }
            }
        }

      

        #endregion
    }
}